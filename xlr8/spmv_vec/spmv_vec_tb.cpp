#include <algorithm>
#include <stdio.h>
#include <vector>

#include "spmv_vec.h"

std::vector<int_vec> buff_to_intvec(int* b, size_t len) {
    std::vector<int_vec> v;
    int_vec chunk;
    for (size_t i = 0; i < len; i+=8) {
        size_t chunk_size = 8 <= (len - i) ? 8 : (len - i);
        size_t j = 0;
        for (; j < chunk_size; j++) {
            chunk[j] = b[i+j];
        }
        for (; j < 8; j++) {
            chunk[j] = 0;
        }
        v.push_back(chunk);
    }
    return v;
}

std::vector<int_vec> buff_to_intvec_padlast(int* b, size_t len) {
    std::vector<int_vec> v;
    int_vec chunk;
    for (size_t i = 0; i < len; i+=8) {
        size_t chunk_size = 8 <= (len - i) ? 8 : (len - i);
        size_t j = 0;
        for (; j < chunk_size; j++) {
            chunk[j] = b[i+j];
        }
        for (; j < 8; j++) {
            chunk[j] = b[len-1];
        }
        v.push_back(chunk);
    }
    /*
    for (int i = 0; i < v.size(); i++) {
        for (int j = 0; j < 8; j++) {
            printf("%d ", v[i][j]);
        }
        printf("\n");
    }
    */
    return v;
}

std::vector<double_vec> buff_to_dvec(double* b, size_t len) {
    std::vector<double_vec> v;
    double_vec chunk;
    for (size_t i = 0; i < len; i+=4) {
        size_t chunk_size = 4 <= (len - i) ? 4 : (len - i);
        size_t j = 0;
        for (; j < chunk_size; j++) {
            chunk[j] = b[i+j];
        }
        for (; j < 4; j++) {
            chunk[j] = 0;
        }
        v.push_back(chunk);
    }
    return v;
}

#define N 10
#define M 8

/* Data structure for sparse matrices */
typedef struct spmat{    
   int* jc; // column pointer, size n+1
   int* ir; // row index, size nnz
   DTYPE* pr; // nnz valuse, size nnz
   int n; // columns
   int m; // rows
   int nnz;
} spmat;

void sparseMV(spmat* A, DTYPE* x, DTYPE* y, int a, int newVector)
{
	int i, j;
	/* fill y with zeros in case A happens to not have any zero rows */
	if( newVector > 0 ){ for( i=0; i<A->m; i++ ){ y[i] = 0; } }
	
  /* if there are no entries in A, just do nothing */
  if( A->nnz == 0 ) return;
  
	if( a > 0 ){
		/* Add A*x */
		for( j=0; j<A->n; j++ ){
			for( i=A->jc[j]; i < A->jc[j+1]; i++ ){
				y[A->ir[i]] += A->pr[i]*x[j];
			}
		}
	} else {
		/* Subtract A*x */
		for( j=0; j<A->n; j++ ){
			for( i=A->jc[j]; i < A->jc[j+1]; i++ ){
				y[A->ir[i]] -= A->pr[i]*x[j];
			}
		}
	}
}

bool v_eq(DTYPE* x1, double_vec* x2, int len) {
    size_t j = 0, k = 0;
	for (auto i = 0; i < len; i++) {
        if (k >= 4) {
            k = 0;
            j++;
        }
	    double x2_el = x2[j][k];
	    k++;
		//printf("x1 %f, x2 %f\n", x1[i], x2_el);
		if (abs(x1[i] - x2_el) > 1e-6) {
			return false;
		}
	}
	return true;
}

// void test1() {
//     int jc[224] = {0, 2, 3, 3, 5, 8, 8, 8, 9, 10, 12};
// 	int ir[638] = {0, 4, 3, 6, 7, 1, 2, 3, 6, 7, 4, 5};
// 	DTYPE pr[638] = {1.2, 0.3, -5.6, 1.1, 90.0, -12.34, 65.1, 32.5, -54.2, 123.3, 0.1, 5};
// 	spmat A = {jc, ir, pr, N, M, 12};
// 	spm_info info = {N, M, 12};
//     DTYPE x[223] = {0.4, 12.0, -45, 3.2, 23.0, -9.2, 2.3, 0.1, 4.5, 10.};
//     DTYPE y_hw[220];
//     DTYPE y_sw[220];
//     for (int i = 0; i < M; i++) {
//     	y_hw[i] = 0.0;
//     	y_sw[i] = 0.0;
//     }

// 	spmv_vec(info, A.jc, A.ir, A.pr, x, y_hw, 0, 1);
// 	sparseMV(&A, x, y_sw, 0, 1);
// 	if (v_eq(y_sw, y_hw, M)) {
// 		printf("TEST PASSED\n");
// 	} else {
// 		printf("TEST NOT PASSED\n");
// 	}

// 	spmv_vec(info, A.jc, A.ir, A.pr, x, y_hw, 0, 0);
// 	sparseMV(&A, x, y_sw, 0, 0);
// 	if (v_eq(y_sw, y_hw, M)) {
// 		printf("TEST PASSED\n");
// 	} else {
// 		printf("TEST NOT PASSED\n");
// 	}

// 	spmv_vec(info, A.jc, A.ir, A.pr, x, y_hw, 1, 1);
// 	sparseMV(&A, x, y_sw, 1, 1);
// 	if (v_eq(y_sw, y_hw, M)) {
// 		printf("TEST PASSED\n");
// 	} else {
// 		printf("TEST NOT PASSED\n");
// 	}
	
// 	spmv_vec(info, A.jc, A.ir, A.pr, x, y_hw, 1, 0);
// 	sparseMV(&A, x, y_sw, 1, 0);
// 	if (v_eq(y_sw, y_hw, M)) {
// 		printf("TEST PASSED\n");
// 	} else {
// 		printf("TEST NOT PASSED\n");
// 	}    
// }

int test2() {
    int jc[224] = {0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220};
	int ir[638] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219};
	DTYPE pr[638] = {};
	spmat A = {jc, ir, pr, 223, 220, 220};
	spm_info info = {223, 220, 220};
    DTYPE x[223] = {-0.030011, 0.239280, 0.334169, 0.000000, 0.019811, -0.029841, 0.035858, -0.033601, 0.018162, 0.034865, -0.007305, -0.018085, 0.012821, 0.042036, 0.021808, -0.024370, 0.006067, 0.025836, 0.025095, 0.025116, 0.015874, -0.044989, 0.005253, -0.027097, 0.022488, -0.010598, -0.008907, 0.001475, 0.008346, 0.024906, -0.012134, -0.056685, -0.035135, 0.031423, 0.051948, 0.006236, -0.019162, 0.028359, 0.019519, -0.007264, 0.040046, 0.014837, 0.035273, -0.008303, 0.008278, 0.023986, 0.004361, 0.030891, 0.022294, 0.015752, -0.034373, -0.013082, -0.035602, 0.009002, -0.001238, 0.018784, 0.001405, 0.003895, 0.033341, -0.006029, -0.054972, 0.005167, 0.025264, 0.053665, -0.059760, 0.039573, 0.001539, -0.024814, -0.013895, 0.038664, 0.038749, 0.004673, 0.017379, -0.010362, 0.015738, 0.007904, -0.027086, -0.016188, 0.019103, 0.018842, -0.005014, 0.031129, 0.030412, -0.060234, -0.000188, 0.003236, -0.018827, -0.012977, 0.008318, 0.028204, 0.037996, -0.024570, -0.023118, 0.041222, 0.031155, 0.041069, -0.027215, 0.015209, -0.041477, -0.017608, 0.022509, 0.023831, 0.043724, 0.005364, -0.019811, 0.029841, -0.035858, 0.033601, -0.018162, -0.034865, 0.007305, 0.018085, -0.012821, -0.042036, -0.021808, 0.024370, -0.006067, -0.025836, -0.025095, -0.025116, -0.015874, 0.044989, -0.005253, 0.027097, -0.022488, 0.010598, 0.008907, -0.001475, -0.008346, -0.024906, 0.012134, 0.056685, 0.035135, -0.031423, -0.051948, -0.006236, 0.019162, -0.028359, -0.019519, 0.007264, -0.040046, -0.014837, -0.035273, 0.008303, -0.008278, -0.023986, -0.004361, -0.030891, -0.022294, -0.015752, 0.034373, 0.013082, 0.035602, -0.009002, 0.001238, -0.018784, -0.001405, -0.003895, -0.033341, 0.006029, 0.054972, -0.005167, -0.025264, -0.053665, 0.059760, -0.039573, -0.001539, 0.024814, 0.013895, -0.038664, -0.038749, -0.004673, -0.017379, 0.010362, -0.015738, -0.007904, 0.027086, 0.016188, -0.019103, -0.018842, 0.005014, -0.031129, -0.030412, 0.060234, 0.000188, -0.003236, 0.018827, 0.012977, -0.008318, -0.028204, -0.037996, 0.024570, 0.023118, -0.041222, -0.031155, -0.041069, 0.027215, -0.015209, 0.041477, 0.017608, -0.022509, -0.023831, -0.043724, -0.005364, -0.712209, 0.006205, 0.054915, -0.718008, -0.031352, 0.021916, -0.712681, -0.042419, 0.061165, -0.725999, -0.021691, 0.077453, -0.707549, -0.003305, 0.074775, 0.500000, -0.019668, 0.078024, -0.500000};
    DTYPE y_hw[220] = {-0.000000, -0.019811, 0.029841, -0.035858, 0.033601, -0.018162, -0.034865, 0.007305, 0.018085, -0.012821, -0.042036, -0.021808, 0.024370, -0.006067, -0.025836, -0.025095, -0.025116, -0.015874, 0.044989, -0.005253, 0.027097, -0.022488, 0.010598, 0.008907, -0.001475, -0.008346, -0.024906, 0.012134, 0.056685, 0.035135, -0.031423, -0.051948, -0.006236, 0.019162, -0.028359, -0.019519, 0.007264, -0.040046, -0.014837, -0.035273, 0.008303, -0.008278, -0.023986, -0.004361, -0.030891, -0.022294, -0.015752, 0.034373, 0.013082, 0.035602, -0.009002, 0.001238, -0.018784, -0.001405, -0.003895, -0.033341, 0.006029, 0.054972, -0.005167, -0.025264, -0.053665, 0.059760, -0.039573, -0.001539, 0.024814, 0.013895, -0.038664, -0.038749, -0.004673, -0.017379, 0.010362, -0.015738, -0.007904, 0.027086, 0.016188, -0.019103, -0.018842, 0.005014, -0.031129, -0.030412, 0.060234, 0.000188, -0.003236, 0.018827, 0.012977, -0.008318, -0.028204, -0.037996, 0.024570, 0.023118, -0.041222, -0.031155, -0.041069, 0.027215, -0.015209, 0.041477, 0.017608, -0.022509, -0.023831, -0.043724, -0.005364, 0.019811, -0.029841, 0.035858, -0.033601, 0.018162, 0.034865, -0.007305, -0.018085, 0.012821, 0.042036, 0.021808, -0.024370, 0.006067, 0.025836, 0.025095, 0.025116, 0.015874, -0.044989, 0.005253, -0.027097, 0.022488, -0.010598, -0.008907, 0.001475, 0.008346, 0.024906, -0.012134, -0.056685, -0.035135, 0.031423, 0.051948, 0.006236, -0.019162, 0.028359, 0.019519, -0.007264, 0.040046, 0.014837, 0.035273, -0.008303, 0.008278, 0.023986, 0.004361, 0.030891, 0.022294, 0.015752, -0.034373, -0.013082, -0.035602, 0.009002, -0.001238, 0.018784, 0.001405, 0.003895, 0.033341, -0.006029, -0.054972, 0.005167, 0.025264, 0.053665, -0.059760, 0.039573, 0.001539, -0.024814, -0.013895, 0.038664, 0.038749, 0.004673, 0.017379, -0.010362, 0.015738, 0.007904, -0.027086, -0.016188, 0.019103, 0.018842, -0.005014, 0.031129, 0.030412, -0.060234, -0.000188, 0.003236, -0.018827, -0.012977, 0.008318, 0.028204, 0.037996, -0.024570, -0.023118, 0.041222, 0.031155, 0.041069, -0.027215, 0.015209, -0.041477, -0.017608, 0.022509, 0.023831, 0.043724, 0.005364, 0.272350, -0.002373, -0.020999, 0.274567, 0.011989, -0.008381, 0.272530, 0.016221, -0.023390, 0.277623, 0.008295, -0.029618, 0.270567, 0.001264, -0.028594, -0.148651, 0.005847, -0.023197, 0.148651};
    DTYPE y_sw[220] = {-0.000000, -0.019811, 0.029841, -0.035858, 0.033601, -0.018162, -0.034865, 0.007305, 0.018085, -0.012821, -0.042036, -0.021808, 0.024370, -0.006067, -0.025836, -0.025095, -0.025116, -0.015874, 0.044989, -0.005253, 0.027097, -0.022488, 0.010598, 0.008907, -0.001475, -0.008346, -0.024906, 0.012134, 0.056685, 0.035135, -0.031423, -0.051948, -0.006236, 0.019162, -0.028359, -0.019519, 0.007264, -0.040046, -0.014837, -0.035273, 0.008303, -0.008278, -0.023986, -0.004361, -0.030891, -0.022294, -0.015752, 0.034373, 0.013082, 0.035602, -0.009002, 0.001238, -0.018784, -0.001405, -0.003895, -0.033341, 0.006029, 0.054972, -0.005167, -0.025264, -0.053665, 0.059760, -0.039573, -0.001539, 0.024814, 0.013895, -0.038664, -0.038749, -0.004673, -0.017379, 0.010362, -0.015738, -0.007904, 0.027086, 0.016188, -0.019103, -0.018842, 0.005014, -0.031129, -0.030412, 0.060234, 0.000188, -0.003236, 0.018827, 0.012977, -0.008318, -0.028204, -0.037996, 0.024570, 0.023118, -0.041222, -0.031155, -0.041069, 0.027215, -0.015209, 0.041477, 0.017608, -0.022509, -0.023831, -0.043724, -0.005364, 0.019811, -0.029841, 0.035858, -0.033601, 0.018162, 0.034865, -0.007305, -0.018085, 0.012821, 0.042036, 0.021808, -0.024370, 0.006067, 0.025836, 0.025095, 0.025116, 0.015874, -0.044989, 0.005253, -0.027097, 0.022488, -0.010598, -0.008907, 0.001475, 0.008346, 0.024906, -0.012134, -0.056685, -0.035135, 0.031423, 0.051948, 0.006236, -0.019162, 0.028359, 0.019519, -0.007264, 0.040046, 0.014837, 0.035273, -0.008303, 0.008278, 0.023986, 0.004361, 0.030891, 0.022294, 0.015752, -0.034373, -0.013082, -0.035602, 0.009002, -0.001238, 0.018784, 0.001405, 0.003895, 0.033341, -0.006029, -0.054972, 0.005167, 0.025264, 0.053665, -0.059760, 0.039573, 0.001539, -0.024814, -0.013895, 0.038664, 0.038749, 0.004673, 0.017379, -0.010362, 0.015738, 0.007904, -0.027086, -0.016188, 0.019103, 0.018842, -0.005014, 0.031129, 0.030412, -0.060234, -0.000188, 0.003236, -0.018827, -0.012977, 0.008318, 0.028204, 0.037996, -0.024570, -0.023118, 0.041222, 0.031155, 0.041069, -0.027215, 0.015209, -0.041477, -0.017608, 0.022509, 0.023831, 0.043724, 0.005364, 0.272350, -0.002373, -0.020999, 0.274567, 0.011989, -0.008381, 0.272530, 0.016221, -0.023390, 0.277623, 0.008295, -0.029618, 0.270567, 0.001264, -0.028594, -0.148651, 0.005847, -0.023197, 0.148651};
    auto y_hw_vec = buff_to_dvec(y_hw, 220);
    spmv_vec(info, buff_to_intvec_padlast(A.jc, 224).data(), buff_to_intvec(A.ir, 220).data(), buff_to_dvec(A.pr, 223).data(), buff_to_dvec(x, 223).data(), y_hw_vec.data(), 1, 0);
	sparseMV(&A, x, y_sw, 1, 0);
	if (v_eq(y_sw, y_hw_vec.data(), 220)) {
		printf("TEST PASSED\n");
        return 0;
	} else {
		printf("TEST NOT PASSED\n");
        return 1;
	} 
}

int test3() {
    int jc[224] = {0, 111, 222, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 539, 540, 541, 564, 565, 566, 589, 590, 591, 618, 619, 620, 632, 633, 634, 635, 636, 637, 638};
	int ir[638] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 110, 113, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 3, 9, 15, 27, 53, 54, 57, 66, 67, 71, 74, 87, 92, 96, 98, 100, 101, 2, 8, 12, 19, 29, 30, 34, 37, 39, 42, 43, 44, 47, 50, 51, 56, 59, 70, 73, 79, 82, 85, 94, 102, 103, 0, 4, 7, 13, 14, 16, 17, 21, 23, 28, 31, 33, 36, 38, 60, 64, 78, 81, 88, 90, 91, 95, 99, 104, 105, 1, 6, 10, 20, 22, 26, 32, 35, 41, 46, 48, 49, 52, 55, 58, 65, 68, 69, 75, 76, 77, 80, 83, 84, 86, 93, 97, 106, 107, 5, 11, 18, 24, 25, 40, 45, 61, 62, 63, 72, 89, 108, 109, 110, 111, 112, 113};
	DTYPE pr[638] = {-0.173209, 0.228127, -0.092802, -0.139789, 0.397148, 0.226120, -0.020449, 0.666744, 0.266380, 0.040662, 0.334546, 0.188692, -0.005436, 0.347010, 0.471246, 0.319735, 0.238377, 0.223497, 0.001004, 0.105795, 0.561010, 0.205417, -0.213798, 0.034002, -0.133419, 0.333633, 0.348912, 0.016467, -0.213598, 0.382912, 0.435465, 0.357944, 0.227932, 0.284609, 0.118050, 0.044570, -0.416085, -0.033510, -0.069439, -0.311640, 0.215560, 0.256471, 0.231661, 0.543113, 0.042961, 0.459894, 0.354195, 0.494306, 0.297874, 0.583310, 0.289586, -0.397823, 0.146584, -0.874508, -0.232730, 0.411291, 0.617279, 0.013447, -1.000000, -0.494234, -0.974473, -0.270038, -0.086321, 0.027065, -0.077200, -0.031134, 0.299484, -0.396414, -0.970668, 0.062054, -0.699154, -0.297816, -0.734215, 0.412679, 0.455758, -0.149083, -0.158687, -0.220109, -0.382629, -0.295036, -0.697321, -0.986135, -0.708664, 0.020467, 0.308394, -0.627819, -0.338202, -0.760607, -0.941211, -0.535421, -0.676107, -0.182622, 0.290735, -0.995120, -0.075684, -0.541827, -0.163342, -0.185933, -0.596798, -0.334197, 0.465596, 0.169483, 0.633778, -0.103576, 0.264499, -0.289619, 0.087539, -0.160125, 0.350360, 0.060560, 0.655347, -0.974157, -0.984764, -0.964839, -0.994392, -0.966011, -0.962602, -0.980022, -0.976316, -0.969094, -0.961282, -0.962607, -0.986750, -0.976049, -0.963541, -0.961995, -0.964359, -0.969360, -0.992680, -0.978368, -0.987109, -0.958937, -0.980377, -0.983722, -0.978332, -0.979258, -0.965221, -0.976222, -1.000000, -0.996039, -0.959449, -0.949406, -0.971466, -0.980760, -0.963409, -0.968583, -0.978988, -0.969383, -0.972902, -0.965899, -0.986624, -0.973839, -0.962854, -0.973066, -0.957295, -0.968578, -0.967124, -0.984516, -0.975950, -0.985817, -0.964281, 0.244031, 0.325170, 0.281577, 0.107559, 0.425662, 0.252645, -0.163995, 0.238696, 0.218088, 0.555735, -0.392480, 0.448723, 0.176381, -0.029661, 0.069973, 0.531914, 0.521656, 0.183163, 0.240373, 0.172627, 0.258699, 0.222532, -0.143295, 0.134512, 0.400433, 0.381216, 0.189637, 0.459555, 0.390545, -0.322405, 0.160217, 0.058769, -0.028859, 0.145552, 0.355694, 0.367390, 0.493856, -0.106698, -0.115617, 0.431404, 0.364242, 0.486252, 0.002814, 0.166083, -0.138112, -0.019341, 0.356620, 0.412445, 0.457945, 0.198713, 0.084329, 0.250757, -0.051536, 0.078601, -0.144104, 0.219296, -0.079673, 0.303609, 0.030132, 0.320094, 0.326078, 0.391668, 0.363075, 0.418926, 0.339171, 0.415381, 0.425790, 0.375552, 0.385645, 0.406218, 0.429897, 0.425774, 0.357991, 0.386384, 0.422891, 0.427673, 0.420389, 0.405438, 0.343285, 0.380018, 0.357081, 0.437311, 0.374601, 0.365775, 0.380116, 0.377608, 0.417767, 0.385907, 0.326078, 0.335265, 0.435681, 0.468982, 0.399325, 0.373580, 0.423299, 0.407722, 0.378337, 0.405372, 0.395219, 0.415718, 0.358310, 0.392566, 0.425009, 0.394752, 0.442588, 0.407737, 0.412047, 0.363716, 0.386659, 0.360370, 0.420626, -1.000000, -1.000000, -1.000000, -0.959624, -0.962643, -1.000000, -1.000000, -1.000000, -0.742530, -0.926663, -0.889868, -0.955415, -1.000000, -1.000000, -1.000000, -0.932481, -0.935079, -1.000000, -0.912793, -1.000000, -0.990799, -1.000000, -0.983897, -1.000000, -0.971082, -0.977929, -1.000000, -0.952164, -0.974557, -1.000000, -0.991170, -0.818765, -0.988888, -1.000000, -0.987657, -0.983103, -0.942423, -0.978946, -0.949600, -0.960802, -0.984313, -0.944514, -1.000000, -0.768397, -1.000000, -1.000000, -0.987291, -0.966991, -0.952642, -1.000000, -0.500000, -0.500000, -0.391668, -0.363075, -0.418926, -0.339171, -0.415381, -0.425790, -0.375552, -0.385645, -0.406218, -0.429897, -0.425774, -0.357991, -0.386384, -0.422891, -0.427673, -0.420389, -0.405438, -0.343285, -0.380018, -0.357081, -0.437311, -0.374601, -0.365775, -0.380116, -0.377608, -0.417767, -0.385907, -0.326078, -0.335265, -0.435681, -0.468982, -0.399325, -0.373580, -0.423299, -0.407722, -0.378337, -0.405372, -0.395219, -0.415718, -0.358310, -0.392566, -0.425009, -0.394752, -0.442588, -0.407737, -0.412047, -0.363716, -0.386659, -0.360370, -0.420626, -1.000000, -1.000000, -1.000000, -0.959624, -0.962643, -1.000000, -1.000000, -1.000000, -0.742530, -0.926663, -0.889868, -0.955415, -1.000000, -1.000000, -1.000000, -0.932481, -0.935079, -1.000000, -0.912793, -1.000000, -0.990799, -1.000000, -0.983897, -1.000000, -0.971082, -0.977929, -1.000000, -0.952164, -0.974557, -1.000000, -0.991170, -0.818765, -0.988888, -1.000000, -0.987657, -0.983103, -0.942423, -0.978946, -0.949600, -0.960802, -0.984313, -0.944514, -1.000000, -0.768397, -1.000000, -1.000000, -0.987291, -0.966991, -0.952642, -1.000000, 0.391668, 0.363075, 0.418926, 0.339171, 0.415381, 0.425790, 0.375552, 0.385645, 0.406218, 0.429897, 0.425774, 0.357991, 0.386384, 0.422891, 0.427673, 0.420389, 0.405438, 0.343285, 0.380018, 0.357081, 0.437311, 0.374601, 0.365775, 0.380116, 0.377608, 0.417767, 0.385907, 0.326078, 0.335265, 0.435681, 0.468982, 0.399325, 0.373580, 0.423299, 0.407722, 0.378337, 0.405372, 0.395219, 0.415718, 0.358310, 0.392566, 0.425009, 0.394752, 0.442588, 0.407737, 0.412047, 0.363716, 0.386659, 0.360370, 0.420626, 1.000000, 1.000000, 1.000000, 0.959624, 0.962643, 1.000000, 1.000000, 1.000000, 0.742530, 0.926663, 0.889868, 0.955415, 1.000000, 1.000000, 1.000000, 0.932481, 0.935079, 1.000000, 0.912793, 1.000000, 0.990799, 1.000000, 0.983897, 1.000000, 0.971082, 0.977929, 1.000000, 0.952164, 0.974557, 1.000000, 0.991170, 0.818765, 0.988888, 1.000000, 0.987657, 0.983103, 0.942423, 0.978946, 0.949600, 0.960802, 0.984313, 0.944514, 1.000000, 0.768397, 1.000000, 1.000000, 0.987291, 0.966991, 0.952642, 1.000000, 0.339171, 0.429897, 0.420389, 0.326078, 0.959624, 0.962643, 1.000000, 0.935079, 1.000000, 1.000000, 0.971082, 0.978946, 1.000000, 0.987291, 0.952642, -1.000000, -1.000000, 0.418926, 0.406218, 0.386384, 0.357081, 0.435681, 0.468982, 0.407722, 0.395219, 0.358310, 0.394752, 0.442588, 0.407737, 0.386659, 1.000000, 1.000000, 1.000000, 0.926663, 0.990799, 1.000000, 1.000000, 0.988888, 0.983103, 1.000000, -1.000000, -1.000000, 0.391668, 0.415381, 0.385645, 0.422891, 0.427673, 0.405438, 0.343285, 0.374601, 0.380116, 0.335265, 0.399325, 0.423299, 0.405372, 0.415718, 0.889868, 1.000000, 0.974557, 0.818765, 0.949600, 0.984313, 0.944514, 1.000000, 1.000000, -1.000000, -1.000000, 0.363075, 0.375552, 0.425774, 0.437311, 0.365775, 0.385907, 0.373580, 0.378337, 0.425009, 0.363716, 0.360370, 0.420626, 1.000000, 1.000000, 0.742530, 0.932481, 0.912793, 1.000000, 0.977929, 1.000000, 0.952164, 0.991170, 1.000000, 0.987657, 0.942423, 0.768397, 0.966991, -1.000000, -1.000000, 0.425790, 0.357991, 0.380018, 0.377608, 0.417767, 0.392566, 0.412047, 0.955415, 1.000000, 1.000000, 0.983897, 0.960802, -1.000000, -1.000000, 1.000000, -1.000000, -1.000000, 1.000000};
	spmat A = {jc, ir, pr, 223, 114, 638};
	spm_info info = {223, 114, 638};
    DTYPE x[223] = {-0.030011, 0.239280, 0.334169, 0.000000, 0.019811, -0.029841, 0.035858, -0.033601, 0.018162, 0.034865, -0.007305, -0.018085, 0.012821, 0.042036, 0.021808, -0.024370, 0.006067, 0.025836, 0.025095, 0.025116, 0.015874, -0.044989, 0.005253, -0.027097, 0.022488, -0.010598, -0.008907, 0.001475, 0.008346, 0.024906, -0.012134, -0.056685, -0.035135, 0.031423, 0.051948, 0.006236, -0.019162, 0.028359, 0.019519, -0.007264, 0.040046, 0.014837, 0.035273, -0.008303, 0.008278, 0.023986, 0.004361, 0.030891, 0.022294, 0.015752, -0.034373, -0.013082, -0.035602, 0.009002, -0.001238, 0.018784, 0.001405, 0.003895, 0.033341, -0.006029, -0.054972, 0.005167, 0.025264, 0.053665, -0.059760, 0.039573, 0.001539, -0.024814, -0.013895, 0.038664, 0.038749, 0.004673, 0.017379, -0.010362, 0.015738, 0.007904, -0.027086, -0.016188, 0.019103, 0.018842, -0.005014, 0.031129, 0.030412, -0.060234, -0.000188, 0.003236, -0.018827, -0.012977, 0.008318, 0.028204, 0.037996, -0.024570, -0.023118, 0.041222, 0.031155, 0.041069, -0.027215, 0.015209, -0.041477, -0.017608, 0.022509, 0.023831, 0.043724, 0.005364, -0.019811, 0.029841, -0.035858, 0.033601, -0.018162, -0.034865, 0.007305, 0.018085, -0.012821, -0.042036, -0.021808, 0.024370, -0.006067, -0.025836, -0.025095, -0.025116, -0.015874, 0.044989, -0.005253, 0.027097, -0.022488, 0.010598, 0.008907, -0.001475, -0.008346, -0.024906, 0.012134, 0.056685, 0.035135, -0.031423, -0.051948, -0.006236, 0.019162, -0.028359, -0.019519, 0.007264, -0.040046, -0.014837, -0.035273, 0.008303, -0.008278, -0.023986, -0.004361, -0.030891, -0.022294, -0.015752, 0.034373, 0.013082, 0.035602, -0.009002, 0.001238, -0.018784, -0.001405, -0.003895, -0.033341, 0.006029, 0.054972, -0.005167, -0.025264, -0.053665, 0.059760, -0.039573, -0.001539, 0.024814, 0.013895, -0.038664, -0.038749, -0.004673, -0.017379, 0.010362, -0.015738, -0.007904, 0.027086, 0.016188, -0.019103, -0.018842, 0.005014, -0.031129, -0.030412, 0.060234, 0.000188, -0.003236, 0.018827, 0.012977, -0.008318, -0.028204, -0.037996, 0.024570, 0.023118, -0.041222, -0.031155, -0.041069, 0.027215, -0.015209, 0.041477, 0.017608, -0.022509, -0.023831, -0.043724, -0.005364, -0.712209, 0.006205, 0.054915, -0.718008, -0.031352, 0.021916, -0.712681, -0.042419, 0.061165, -0.725999, -0.021691, 0.077453, -0.707549, -0.003305, 0.074775, 0.500000, -0.019668, 0.078024, -0.500000};
    DTYPE y_hw[114];
    auto y_hw_vec = buff_to_dvec(y_hw, 114);
    DTYPE y_sw[114];
    spmv_vec(info, buff_to_intvec_padlast(A.jc, 224).data(), buff_to_intvec(A.ir, 638).data(), buff_to_dvec(A.pr, 638).data(), buff_to_dvec(x, 223).data(), y_hw_vec.data(), 1, 1);
	sparseMV(&A, x, y_sw, 1, 1);
	if (v_eq(y_sw, y_hw_vec.data(), 114)) {
		printf("TEST PASSED\n");
        return 0;
	} else {
		printf("TEST NOT PASSED\n");
        return 1;
	}     
}

int main() {
    int t1 = test2();
    int t2 = test3();
    return t1 + t2;
}
